<?php
namespace AppBundle\Repository;

use AppBundle\Entity\Project;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * This class was generated along with src/AppBundle/Entity/Task.php using `bin/console doctrine:entity:generate`
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Get all incomplete Task entities related to the project
     *
     * @param Project $project
     * @return array
     */
    public function getIncompleteTasks(Project $project)
    {
        // Get an instance of a query builder that would query from the `Task` entity's DB table.
        // The parameter 't' will serve as an alias (short name) for referencing "properties" in the query.
        $builder = $this->createQueryBuilder('t');

        // Add a condition where 'completedAt' does not contain any value (IS NULL). When adding a condition, _always_ use
        // the "alias.property" format. In this case, our alias is 't' and our property is `completedAt` as defined in our
        // 'src/AppBundle/Entity/Task.php' line 35.
        $builder->where('t.completedAt IS NULL');

        // Add another condition that the project associated with the tasks must be the same value as `$project`.
        // The `project` property is defined in our 'src/AppBundle/Entity/Task.php line 57.
        // The `?0` is a positional parameter with the format '?N' where N is a integer. This is followed by calling
        // `setParameter` with the first parameter the number, in this case, 0, and the second parameter, the value.
        $builder->andWhere('t.project = ?0')->setParameter('0', $project);

        // Get the query instance based on what we specified from the query builder.
        $query = $builder->getQuery();

        // Perform the actual query and get the result as an array of `Task` entities
        $tasks = $query->getResult();

        return $tasks;
    }
}
